<template>
  <div class="container">
    <el-button
      type="primary"
      :style="{ position: 'fixed', top: 0, right: 0 }"
      @click="demoNext"
    >
      下一步
    </el-button>
    <div class="early box-border">
      <div class="title">早期预警</div>
      <div class="item-title">症候群监测预警</div>
      <div
        v-for="(v, i) in earlyTopArr"
        :key="i"
        :class="getClass('msg-item syndrome', v.warnLevel)"
      >
        <div class="left">
          <div class="icon">
            <img :src="v.icon" alt="">
          </div>
          <div class="item">
            <div class="value">
              <v-number
                v-model="v.monitorTotal"
                :speed="speed"
                :style="{
                  color: '#00d7ec',
                  font: 'bold 3.6rem ds_digi',
                }"
              />
            </div>
            <div class="label">{{ v.label }}</div>
          </div>
        </div>
        <svg-icon icon-class="line" class="content-line" />
        <template v-if="i === 0">
          <div class="right">
            <div v-for="(v, i) in 2" :key="i" class="right-item">
              <div class="barWarp">
                <line-bar />
              </div>
              <span>呼吸道疾病</span>
            </div>
          </div>
        </template>
        <template v-else>
          <div class="right"><diff-bar /></div>
        </template>
      </div>

      <template v-for="(v, i) in earlyWarning">
        <template v-if="v.title === '网络舆情监控预警'">
          <div :key="`${i}-title`" class="item-title">{{ v.title }}</div>
          <div :key="`${i}-value`" :class="getClass('msg-item env nomal-item')">
            <div class="block">
              <legend-ring-chart />
              <div class="chartText">测试文字</div>
            </div>
            <!-- <svg-icon icon-class="line" class="content-line" /> -->
            <div class="block">
              <legend-ring-chart />
              <div class="chartText">测试文字</div>
            </div>
            <!-- <svg-icon icon-class="line" class="content-line" /> -->
            <div class="block">
              <legend-ring-chart />
              <div class="chartText">测试文字</div>
            </div>
            <!-- <svg-icon icon-class="line" class="content-line" /> -->
            <div class="block">
              <legend-ring-chart />
              <div class="chartText">测试文字</div>
            </div>
          </div>
        </template>
        <template v-else>
          <div :key="`${i}-title`" class="item-title">{{ v.title }}</div>
          <div :key="`${i}-value`" :class="getClass('msg-item env nomal-item')">
            <div class="left">
              <div class="item">
                <div class="value">
                  <v-number
                    v-model="v.monitorTotal"
                    :speed="speed"
                    :style="{
                      color: '#00d7ec',
                      font: 'bold 3.6rem ds_digi',
                    }"
                  />
                </div>
                <div class="label">{{ v.label }}</div>
              </div>
            </div>
            <svg-icon icon-class="line" class="content-line" />
            <div class="right">
              <component :is="v.render" />
            </div>
          </div>
        </template>
      </template>
      <!-- <template v-for="(v, i) in earlyBottomArr">
        <template v-if="v.title === '网络舆情监控预警'">
          <div :key="`${i}-title`" class="item-title">{{ v.title }}</div>
          <div :key="`${i}-value`" :class="getClass('msg-item env nomal-item')">
            <div class="block">
              <legend-ring-chart />
            </div>
             <svg-icon icon-class="line" class="content-line" />
            <div class="block">
              <legend-ring-chart />
            </div>
            <svg-icon icon-class="line" class="content-line" />
            <div class="block">
              <legend-ring-chart />
            </div>
            <svg-icon icon-class="line" class="content-line" />
            <div class="block">
              <legend-ring-chart />
            </div>
          </div>
        </template>
        <template v-else>
          <div :key="`${i}-title`" class="item-title">{{ v.title }}</div>
          <div :key="`${i}-value`" :class="getClass('msg-item env nomal-item')">
            <div class="left">
              <div class="item">
                <div class="value">
                  <v-number
                    v-model="v.monitorTotal"
                    :speed="speed"
                    :style="{
                      color: '#00d7ec',
                      font: 'bold 3.6rem ds_digi',
                    }"
                  />
                </div>
                <div class="label">{{ v.label }}</div>
              </div>
            </div>
            <svg-icon icon-class="line" class="content-line" />
            <div class="right">11</div>
          </div>
        </template>
      </template> -->
    </div>
    <div class="content box-border">
      <div class="top">
        <div class="content-t-item">
          <ring-chart class="animation-chart" />
          <div class="content-t-text">
            <div class="content-t-left">
              <div class="label">累计确诊病例</div>
              <v-number
                v-model="totalCaseFrontData.today.total_case"
                :speed="speed"
                :style="{
                  color: '#00d7ec',
                  font: 'bold 3.6rem ds_digi',
                }"
              />
            </div>
            <div class="content-t-right">
              <div class="label">较昨日</div>
              <div class="value">
                {{
                  totalCaseFrontData.today.total_case -
                    totalCaseFrontData.yesterday.total_case
                }}
              </div>
            </div>
          </div>
        </div>
        <div class="content-t-item">
          <ring-chart class="animation-chart" />
          <div class="content-t-text">
            <div class="content-t-left">
              <div class="label">现有确诊病例</div>
              <v-number
                v-model="totalCaseFrontData.today.total_case_active"
                :speed="speed"
                :style="{
                  color: '#00d7ec',
                  font: 'bold 3.6rem ds_digi',
                }"
              />
            </div>
            <div class="content-t-right">
              <div class="label">较昨日</div>
              <div class="value">
                {{
                  totalCaseFrontData.today.total_case_active -
                    totalCaseFrontData.yesterday.total_case_active
                }}
              </div>
            </div>
          </div>
        </div>
        <div class="content-t-item">
          <ring-chart class="animation-chart" />
          <div class="content-t-text">
            <div class="content-t-left">
              <div class="label">今日新增无症状感染者</div>
              <v-number
                v-model="totalCaseFrontData.today.new_case_asymptomatic"
                :speed="speed"
                :style="{
                  color: '#00d7ec',
                  font: 'bold 3.6rem ds_digi',
                }"
              />
            </div>
            <div class="content-t-right">
              <div class="label">较昨日</div>
              <div class="value">
                {{
                  totalCaseFrontData.today.new_case_asymptomatic -
                    totalCaseFrontData.yesterday.new_case_asymptomatic
                }}
              </div>
            </div>
          </div>
        </div>
        <div class="content-t-item">
          <ring-chart class="animation-chart" />
          <div class="content-t-text">
            <div class="content-t-left">
              <div class="label">今日新增疑似病例</div>

              <v-number
                v-model="totalCaseFrontData.today.new_case_uncertain"
                :speed="speed"
                :style="{
                  color: '#00d7ec',
                  font: 'bold 3.6rem ds_digi',
                }"
              />
            </div>
            <div class="content-t-right">
              <div class="label">较昨日</div>
              <div class="value">
                {{
                  totalCaseFrontData.today.new_case_uncertain -
                    totalCaseFrontData.yesterday.new_case_uncertain
                }}
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="map box-container">
        <!-- <province-map :data="addressList" /> -->
        <echarts-map :data="addressList" @detail="detailShow" />
      </div>
    </div>
    <div class="important box-border">
      <div class="title">重点人群</div>
      <template v-for="(v, i) in importantTopArr">
        <div :key="`${i}-label`" class="item-title">
          {{ v.label }}
        </div>
        <div
          :key="`${i}-value`"
          :class="getClass('msg-item important-item nomal-item', v.warnLevel)"
          @click="modalShow(v)"
        >
          <div class="left">
            <div class="item">
              <div class="value">
                <v-number
                  v-model="v.monitorTotal"
                  :speed="speed"
                  :style="{
                    color: '#00d7ec',
                    font: 'bold 3.6rem ds_digi',
                  }"
                />
              </div>
              <div class="label">监测总人数</div>
            </div>
          </div>
          <svg-icon icon-class="line" class="content-line" />
          <div class="right">11</div>
        </div>
      </template>
      <div class="items">
        <div v-for="(v, i) in importantBottomArr" :key="i" class="import-item">
          <div class="item-title">{{ v.label }}</div>
          <div :class="getClass('text', v.warnLevel)" @click="modalShow(v)">
            <div class="value">
              <v-number
                v-model="v.monitorTotal"
                :speed="speed"
                :style="{
                  color: '#00d7ec',
                  font: 'bold 3.6rem ds_digi',
                }"
              />
            </div>
            <div class="label">监测总人数</div>
          </div>
        </div>
      </div>
    </div>
    <div class="gather box-border">
      <div class="title">聚集性预警</div>
      <div class="item-title">交通工具聚集性</div>
      <div class="gather-item vehicle">
        <div class="left">
          <div
            v-for="(v, i) in vehicleArr"
            :key="i"
            :class="getClass('item', v.warnLevel)"
          >
            <div class="icon">
              <img :src="v.icon" alt="">
            </div>
            <div class="label">{{ v.label }}</div>
            <div class="value">{{ v.monitorTotal }}{{ v.unit }}</div>
          </div>
        </div>
        <svg-icon icon-class="line" class="content-line" />
        <div class="right" />
      </div>
      <div class="item-title">机构聚集性</div>
      <div class="gather-item org">
        <div
          v-for="(v, i) in orgArr"
          :key="i"
          :class="getClass('item', v.warnLevel)"
        >
          <div class="icon">
            <img :src="v.icon" alt="">
          </div>
          <div class="label">{{ v.label }}</div>
          <div class="value">监测{{ v.monitorTotal }}所</div>
        </div>
      </div>
      <div class="gather-chart">
        <!-- <bar-chart /> -->
      </div>
    </div>

    <el-dialog
      v-if="dialogVisible"
      :visible.sync="dialogVisible"
      :append-to-body="true"
      class="new-multipoint"
    >
      <div class="modal-container">
        <div class="left">
          <div v-for="(v, i) in list" :key="i" class="item">
            <div class="img">
              <img
                :src="v.image"
                alt=""
                :onerror="require('@/assets/images/default-head.jpg')"
              >
            </div>
            <div class="info">
              <div
                v-for="(val, idx) in [
                  { label: '姓名', field: 'name' },
                  { label: '性别', field: 'gender' },
                  { label: '国籍', field: 'country' },
                  { label: '证件类型', field: 'cardType' },
                  { label: '证件号', field: 'cardId' },
                  { label: '就诊医院', field: 'hospital' },
                  { label: '检测时间', field: 'testDate' },
                  {
                    label: '检测结果',
                    field: 'testResult',
                    render: (data) => {
                      return data.testResult ? data.testResult : '未检测';
                    },
                  },
                  {
                    label: '购药记录',
                    field: 'medicineEx',
                    render: (data) => {
                      return Number(data.medicineEx) === 0 ? '有' : '无';
                    },
                  },
                  { label: '临床症状', field: 'symptom' },
                ]"
                :key="idx"
                class="info-item"
              >
                <div class="label">{{ val.label }}</div>
                <div class="value">
                  {{ val.render ? val.render(v) : v[val.field] }}
                </div>
              </div>
              <div class="info-item" style="color: red">
                <div class="label">触发规则</div>
                <div class="value">重点人群+临床症状</div>
              </div>
            </div>
          </div>
        </div>
        <div class="right">
          <aggregation-test :data="selectData" />
        </div>
      </div>
    </el-dialog>

    <el-dialog
      v-if="dialogDetailVisible"
      :visible.sync="dialogDetailVisible"
      :append-to-body="true"
      class="new-multipoint-detail"
    >
      <div class="modal-container">
        <aggregation-test :data="selectData" />
      </div>
    </el-dialog>
  </div>
</template>

<script>
import { VNumber } from '@maxflex/v-number'
import RingChart from './components/RingChart'
// import ProvinceMap from "./components/ProvinceMap";
import AggregationTest from './components/AggregationTest'
import DiffBar from './components/DiffBar'
import LineBar from './components/LineBar'
// import BarChart from './components/BarChart'
import LegendRingChart from './components/LegendRingChart'
import EchartsMap from './components/EchartsMap'

import { totalCaseFront } from '@/api/polymerize'
import {
  gatherList,
  importantList,
  syndromeList,
  envList,
  netList,
  medicineList,
  // closeList,
  // enterList,
  // studentList,
  getPersonnelInfo,
  getImportantList,
  getClosePersonList
} from '@/api/real-api'

// demo 演示接口
import { demoInit, demoZhq, demoYs, demoQz, demoMj } from '@/api/real-api'
const demoSteps = [
  demoInit, // 1. 初始化
  demoZhq, // 2. 症候群
  demoYs, // 3. 疑似病例
  demoQz, // 4.确诊病例
  demoMj // 5.生成密接数据]
]
let demoCurrentStep = 0

// import dayjs from "dayjs";

const earlyTopArr = [
  {
    label: '呼吸道症候群监测',
    icon: require('@/assets/images/warning_red.png'),
    syndromeCode: '1',
    monitorTotal: 0
  },
  {
    label: '腹泻症候群预警',
    icon: require('@/assets/images/warning_red.png'),
    syndromeCode: '2',
    monitorTotal: 0
  },
  {
    label: '发热症候群预警',
    icon: require('@/assets/images/warning_red.png'),
    syndromeCode: '3',
    monitorTotal: 0
  }
]
const earlyBottomArr = [
  {
    title: '环境采样监测预警',
    label: '冷链监测总数',
    type: 'env',
    monitorTotal: 0
  },
  {
    title: '网络舆情监控预警',
    type: 'network',
    monitorTotal: 0
  },
  {
    title: '药店销售监测预警',
    label: '药物销售总量',
    type: 'medicine',
    monitorTotal: 0
  }
]

const earlyWarning = {
  environment: {
    title: '环境采样监测预警',
    label: '冷链监测总数',
    type: 'env',
    monitorTotal: 0,
    render: {
      functional: true,
      props: {},
      render() {
        return (
          <div>
            <div class='rightTitle red'>冷链采样预警</div>
            <p class='rightContent'>广东市南沙仓库，第23890808批次物品阳性；</p>
          </div>
        )
      }
    }
  },
  online: {
    title: '网络舆情监控预警',
    type: 'network',
    monitorTotal: 0
  },
  drugstore: {
    title: '药店销售监测预警',
    label: '药物销售总量',
    type: 'medicine',
    monitorTotal: 0,
    render: {
      functional: true,
      props: {},
      render() {
        return (
          <div>
            <div class='rightTitle yellow'>
              购药异常信息预警<span class='more'>查看购药人信息</span>
            </div>
            <p class='rightContent'>
              广州市，白云区康健药店退热药销售高于同期水平；
            </p>
          </div>
        )
      }
    }
  }
}

// 重点人群， 顶部数据
const importantTopArr = [
  {
    label: '港口工作人员',
    crowdCode: '2',
    monitorTotal: 0
  },
  {
    label: '来自香港的货车司机/接驳司机',
    crowdCode: '1',
    monitorTotal: 0
  },
  {
    label: '托幼机构+学校学生监测',
    crowdCode: '6',
    monitorTotal: 0
  }
]
// 重点人员， 底部数据
const importantBottomArr = [
  {
    label: '来自中高风险地区人员',
    crowdCode: '4',
    monitorTotal: 0
  },
  {
    label: '从事冷链工作人员',
    crowdCode: '3',
    monitorTotal: 0
  },
  {
    label: '口岸工作人员',
    crowdCode: '2',
    monitorTotal: 0
  },
  {
    label: '入境人员',
    crowdCode: '8',
    monitorTotal: 0
  },
  {
    label: '解除医学观察人员',
    crowdCode: '5',
    monitorTotal: 0
  }
]
// 交通工具
const vehicleArr = [
  {
    label: '监测航班数',
    icon: require('@/assets/images/aircraft.png'),
    monitorTotal: 0,
    unit: '架次',
    gatherCode: '1'
  },
  {
    label: '监测火车数',
    icon: require('@/assets/images/train.png'),
    monitorTotal: 0,
    unit: '车次',
    gatherCode: '3'
  },
  {
    label: '监测轮船数',
    icon: require('@/assets/images/ship.png'),
    monitorTotal: 0,
    unit: '船次',
    gatherCode: '2'
  }
]
// 机构
const orgArr = [
  {
    label: '托幼+学校',
    monitorTotal: 0,
    icon: require('@/assets/images/school.png'),
    gatherCode: '8'
  },
  {
    label: '养老福利机构',
    monitorTotal: 0,
    icon: require('@/assets/images/welfare.png'),
    gatherCode: '6'
  },
  {
    label: '精神专科医院',
    monitorTotal: 0,
    icon: require('@/assets/images/hospital.png'),
    gatherCode: '4'
  },
  {
    label: '监管机构',
    monitorTotal: 0,
    icon: require('@/assets/images/org.png'),
    gatherCode: '7'
  },
  {
    label: '农贸市场',
    monitorTotal: 0,
    icon: require('@/assets/images/market.png'),
    gatherCode: '5'
  }
]

export default {
  components: {
    RingChart,
    // ProvinceMap,
    VNumber,
    AggregationTest,
    EchartsMap,
    DiffBar,
    LineBar,
    // BarChart,
    LegendRingChart
  },
  data() {
    return {
      count_date: '2020-12-14',
      totalCaseFrontData: {
        today: {
          total_case: '',
          total_case_active: '',
          new_case_asymptomatic: '',
          new_case_uncertain: ''
        },
        yesterday: {
          total_case: '',
          total_case_active: '',
          new_case_asymptomatic: '',
          new_case_uncertain: ''
        }
      },
      speed: 500,
      earlyTopArr,
      earlyBottomArr,
      earlyWarning,
      importantTopArr,
      importantBottomArr,
      vehicleArr,
      orgArr,
      dialogVisible: false,
      dialogDetailVisible: false,
      addressList: [],
      selectData: {},
      list: []
    }
  },
  mounted() {
    // this.count_date = dayjs()
    //   .subtract(1, "day")
    //   .format("YYYY-MM-DD");

    // this.demoNext();

    let timer = null
    timer = setInterval(() => {
      this.init()
    }, 3000)
    // 销毁动态事件
    this.$once('hook:beforeDestroy', () => {
      clearInterval(timer)
      timer = null
    })

    // this.init();
  },
  methods: {
    getClass(classes, level) {
      classes = classes.split(' ')
      const strLevel = String(level)
      if (strLevel === '1' || strLevel === '2') {
        return [...classes, 'msg-waring']
      }
      if (strLevel === '3' || strLevel === '4') {
        return [...classes, 'msg-error']
      }
      return [...classes]
    },
    init() {
      this.addressList = []
      this.totalCaseFront()
      this.importantList()
      this.gatherList()
      this.syndromeList()
      this.envList()
      this.netList()
      this.medicineList()
    },
    // 获取顶部 4个数据
    totalCaseFront() {
      const { count_date } = this
      const param = { count_date }
      totalCaseFront(param).then((res) => {
        this.totalCaseFrontData = res.data
      })
    },
    // 重点人群查询
    importantList() {
      importantList({}).then((res) => {
        res.data.forEach((v) => {
          let index = this.importantTopArr.findIndex((j) => {
            return String(j.crowdCode) === String(v.crowdCode)
          })
          if (index) {
            this.$set(this.importantTopArr, index, {
              ...this.importantTopArr[index],
              ...v
            })
          }
          index = this.importantBottomArr.findIndex((j) => {
            return String(j.crowdCode) === String(v.crowdCode)
          })
          if (index) {
            this.$set(this.importantBottomArr, index, {
              ...this.importantBottomArr[index],
              ...v
            })
          }

          // 地图信息
          this.setAddressList(v)
        })
      })
    },
    // 聚集性
    gatherList() {
      gatherList({}).then((res) => {
        res.data.forEach((v) => {
          let index = this.vehicleArr.findIndex((j) => {
            return String(j.gatherCode) === String(v.gatherCode)
          })
          if (index) {
            this.$set(this.vehicleArr, index, {
              ...this.vehicleArr[index],
              ...v
            })
          }
          index = this.orgArr.findIndex((j) => {
            return String(j.gatherCode) === String(v.gatherCode)
          })
          if (index) {
            this.$set(this.orgArr, index, { ...this.orgArr[index], ...v })
          }

          // 地图信息
          this.setAddressList(v)
        })
      })
    },
    // 症候群
    syndromeList() {
      syndromeList({}).then((res) => {
        res.data.forEach((v) => {
          const index = this.earlyTopArr.findIndex((j) => {
            return String(j.syndromeCode) === String(v.syndromeCode)
          })
          if (index) {
            this.$set(this.earlyTopArr, index, {
              ...this.earlyTopArr[index],
              ...v
            })
          }

          // 地图信息
          this.setAddressList(v)
        })
      })
    },
    // 环境采样
    envList() {
      envList({}).then((res) => {
        res.data.forEach((v) => {
          const index = this.earlyBottomArr.findIndex((j) => {
            return String(j.syndromeCode) === 'env'
          })
          if (index) {
            this.$set(this.earlyBottomArr, index, {
              ...this.earlyBottomArr[index],
              ...v
            })
          }
        })

        // 地图信息
        this.setAddressList(res.data)
      })
    },
    // 环境采样
    netList() {
      netList({}).then((res) => {
        res.data.forEach((v) => {
          const index = this.earlyBottomArr.findIndex((j) => {
            return String(j.syndromeCode) === 'network'
          })
          if (index) {
            this.$set(this.earlyBottomArr, index, {
              ...this.earlyBottomArr[index],
              ...v
            })
          }
        })

        // 地图信息
        this.setAddressList(res.data)
      })
    },
    // 药店
    medicineList() {
      medicineList({}).then((res) => {
        res.data.forEach((v) => {
          const index = this.earlyBottomArr.findIndex((j) => {
            return String(j.syndromeCode) === 'medicine'
          })
          if (index) {
            this.$set(this.earlyBottomArr, index, {
              ...this.earlyBottomArr[index],
              ...v
            })
          }
        })

        // 地图信息
        this.setAddressList(res.data)
      })
    },
    // 设置地图信息
    setAddressList(data) {
      // 地图信息
      if (Number(data.warnLevel) > 0) {
        if (!data.addressList) return
        this.addressList = this.addressList.concat(
          data.addressList
            .filter((v) => v)
            .map((j) => ({ ...j, warnLevel: data.warnLevel }))
        )
      }
    },
    modalShow(data) {
      getImportantList({ page: 1, limit: 10, crowdCode: data.crowdCode }).then(
        (res) => {
          if (res.data.length <= 0) return

          this.list = res.data
          // 获取详情数据
          const { name, cardId } = res.data[0]
          Promise.all([
            getPersonnelInfo({ name, cardId }),
            getClosePersonList({ name, cardId, page: 1, limit: 10 })
          ]).then((res) => {
            const getPersonnelInfoData = res[0].data
            const getClosePersonListData = res[1].data
            this.selectData = getPersonnelInfoData
            this.dialogVisible = true
            this.selectData.closePersonListData = getClosePersonListData
          })
        }
      )
    },
    detailShow(data) {
      const { name, cardId } = data
      Promise.all([
        getPersonnelInfo({ name, cardId }),
        getClosePersonList({ name, cardId, page: 1, limit: 10 })
      ]).then((res) => {
        const getPersonnelInfoData = res[0].data
        const getClosePersonListData = res[1].data
        this.selectData = getPersonnelInfoData
        this.dialogDetailVisible = true
        this.selectData.closePersonListData = getClosePersonListData
      })
    },
    demoNext() {
      demoSteps[demoCurrentStep]({}).then((res) => {
        if (demoCurrentStep >= demoSteps.length - 1) {
          demoCurrentStep = 0

          //  提示舆情
          this.$notify({
            title: '舆情提示',
            dangerouslyUseHTMLString: true,
            customClass: 'new-multipoint-detail-yuqing',
            duration: 0,
            position: 'bottom-right',
            message: `
            <img src=${require('@/assets/png/yuqing-modal.png')}>
            `
          })
        } else {
          demoCurrentStep++
        }
      })
    }
  }
}
</script>

<style lang="scss" scoped>
@import "~@/styles/big.scss";

// 元素间距
$boxSpace: calc((100% - #{getWidth(58.44 * 3)} - #{getWidth(42.25 * 4)}) / 8);

.container {
  padding: $boxSpace;
  display: flex;
  justify-content: space-between;
  box-sizing: border-box;

  > div + div {
    margin-left: $boxSpace;
  }
}

// 左右两侧内容
.early,
.important,
.gather {
  flex: none;
  width: getWidth(58.44);
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;

  overflow-y: scroll;
  &::-webkit-scrollbar {
    display: none;
  }

  .title {
    width: 100%;
    height: getHeight(5.81 + 0.38);
    background: #212342;
    padding: 0 getWidth(2.06);
    flex: none;
    display: flex;
    align-items: center;

    font-size: $itemTitleSize;
    font-family: PingFang-SC-Bold, PingFang-SC;
    font-weight: bold;
    color: #ffffff;

    // position: relative;
    position: sticky;
    top: 0;
    z-index: 1;
    &::after {
      position: absolute;
      content: "";
      top: 0;
      left: 0;
      width: 100%;
      height: getHeight(0.38);
    }
  }
}
.early {
  .title::after {
    background: linear-gradient(101deg, #ffa83b 0%, #ffea00 100%);
  }

  .syndrome {
    display: flex;
    flex-direction: row;

    .content-line {
      height: 100%;
      margin: 0 getWidth(3.44);
    }
    .left {
      flex: 13;
      display: flex;
      justify-content: space-around;
      align-items: center;
      padding: 0 getWidth(3.5);
      > .icon {
        width: getWidth(7.88);
        height: getHeight(7.88);
        margin-right: getWidth(2.8);
        > img {
          width: 100%;
          height: 100%;
        }
      }
      > .item {
        display: flex;
        flex-direction: column;
        .label {
          margin-top: getHeight(1.25);
        }
      }
    }
    .right {
      display: flex;
      justify-content: space-between;
      flex: 7;
      .right-item {
        display: flex;
        flex-direction: column;
        width: 40%;
        .barWarp {
          flex: 6.94;
        }
        span {
          flex: 1.75;
          height: getHeight(1.75);
          line-height: getHeight(1.75);
          font-family: PingFangSC-Medium;
          font-size: $nomalSmallSize;
          font-weight: normal;
          font-stretch: normal;
          letter-spacing: getWidth(0.06);
          color: rgba(255, 255, 255, 0.5);
        }
      }
    }
  }
}
.important {
  .title::after {
    background: linear-gradient(270deg, #ffe900 0%, #f52b7b 100%);
  }

  .items {
    display: flex;
    flex-wrap: wrap;
    width: 100%;
    > .import-item + .import-item {
      margin-left: getWidth(1);
    }
    > .import-item {
      width: calc((100% - #{getWidth(2)}) / 3);
      border-radius: getHeight(0.25) getWidth(0.25);
      margin-top: getHeight(1.1);
      &:nth-child(3n + 1) {
        margin-left: 0;
      }

      .item-title {
        background-color: #212342;
      }

      > .text {
        margin-top: getHeight(1);
        background-color: #212342;
        height: getHeight(10.63);
        display: flex;
        flex-direction: column;
        justify-content: center;
        padding: 0 getWidth(2.44);

        .label {
          font-family: PingFangSC-Medium;
          font-size: $nomalSize;
          font-weight: normal;
          font-stretch: normal;
          letter-spacing: 0rem;
          color: rgba(255, 255, 255, 0.8);
          margin-top: getHeight(1.25);
        }
      }
    }
  }
}
.gather {
  .title::after {
    background: linear-gradient(80deg, #f52b7b 0%, #ff8375 100%);
  }

  .gather-item {
    width: 100%;
    height: getHeight(19.06);
    background-color: #212342;
    margin-top: getHeight(1);
  }

  .gather-item.vehicle {
    display: flex;
    justify-content: space-between;
    .content-line {
      height: 100%;
      margin: 0 getWidth(2);
    }
    > .left,
    > .right {
      width: 50%;
    }
    > .left {
      display: flex;
      flex-direction: column;
      justify-content: space-around;
      > .item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-family: PingFangSC-Medium;
        font-size: $nomalSize;
        font-weight: normal;
        font-stretch: normal;
        letter-spacing: 0rem;
        color: rgba(255, 255, 255, 0.9);
        padding: 0 getWidth(2);
      }
    }
  }

  .gather-item.org {
    display: flex;
    flex-wrap: wrap;
    > .item {
      width: 50%;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 getWidth(2);

      font-family: PingFangSC-Medium;
      font-size: $nomalSize;
      font-weight: normal;
      font-stretch: normal;
      letter-spacing: 0rem;
      color: rgba(255, 255, 255, 0.9);
    }
  }

  .gather-chart {
    width: 100%;
    height: getHeight(35.25);
    background-color: #212342;
    margin-top: getHeight(1);
  }
}

//  中间内容
.content {
  width: 100%;
  display: flex;
  flex-direction: column;

  .top {
    display: flex;
    justify-content: space-between;
    height: getHeight(12.38);
    flex: none;
    overflow: hidden;

    .content-t-item + .content-t-item {
      margin-left: $boxSpace;
    }

    .content-t-item {
      flex: none;
      width: getWidth(42.25);
      background: #212342;
      padding: getHeight(1.2) getWidth(1.2);
      display: flex;

      position: relative;
      &::after {
        position: absolute;
        content: "";
        top: 0;
        left: 0;
        width: 100%;
        height: getHeight(0.38);
        background: linear-gradient(262deg, #0099ff 0%, #00ecff 100%);
      }

      .echarts {
        width: getHeight(12.38 - 1.2 * 2);
        height: getHeight(12.38 - 1.2 * 2);
        flex: none;
      }
      .content-t-text {
        width: 100%;
        margin-left: getWidth(1.5);
        display: flex;
        justify-content: space-between;

        .content-t-left {
          display: flex;
          flex-direction: column;
          justify-content: space-between;
          .label {
            font-size: $itemTitleSize;
            font-family: PingFang-SC-Heavy, PingFang-SC;
            font-weight: 800;
            color: #ffffff;
          }
          .value {
            font-family: ds_digi;
            font-size: $digiFontSize;
            font-weight: bold;
            color: #00d7ec;
          }
        }
        .content-t-right {
          display: flex;
          flex-direction: column;
          justify-content: space-between;
          .label {
            font-size: $itemTitleSize;
            font-family: PingFangSC-Medium, PingFang SC;
            font-weight: 500;
            color: #ffffff;
          }
          .value {
            font-size: $nomalSize;
            font-family: Arial-Black, Arial;
            font-weight: 800;
            color: #ffffff;
            background: linear-gradient(53deg, #f52b7b 0%, #ffe900 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
          }
        }
      }
    }
  }

  .map {
    width: 100%;
    height: 100%;
    position: relative;
  }
}

// 左边有标题
.item-title {
  // width: getWidth(58.38);
  width: 100%;
  height: getHeight(3.62);
  background: #212342;
  margin-top: getHeight(1.94);
  line-height: getHeight(3.62);
  padding-left: getWidth(0.88);

  font-size: $itemTitleSize;
  font-family: PingFang-SC-Bold, PingFang-SC;
  font-weight: bold;
  color: rgba(#fff, 0.9);
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;

  position: relative;
  &::after {
    position: absolute;
    content: "";
    width: getWidth(0.36);
    height: 100%;
    background: #ffe703;
    left: 0;
    top: 0;
  }
}

// 右上角
.msg-item {
  margin-top: getHeight(0.75);
  width: getWidth(58.38);
  min-height: getHeight(11.63);
  padding: getHeight(1.2) getWidth(1.2);
  background: #212342;

  display: flex;
  flex-direction: column;
  justify-content: space-between;

  .num {
    margin-right: getWidth(2);
  }

  .label {
    font-size: $nomalSize;
    font-family: PingFangSC-Medium, PingFang SC;
    font-weight: 500;
    color: #ffffff;
    margin-bottom: getHeight(0.6);

    display: flex;
    justify-content: space-between;

    > span:nth-child(2) {
      user-select: none;
      cursor: pointer;
    }
  }

  font-size: $nomalSmallSize;
  font-family: PingFangSC-Medium, PingFang SC;
  font-weight: 500;
  color: #ffffff;
}
.msg-error,
.msg-waring {
  // // 边框
  // border: getWidth(0.25) solid;
  // clip-path: inset(0 round getWidth(0.25));
  // width: getWidth(58.38 - 0.25 * 2);
  // min-height: getHeight(8.88 - 0.25 * 2);
  // 角标
  position: relative;
  &:after {
    position: absolute;
    content: "\e7a3";
    font-family: element-icons !important;
    color: #fff;
    font-size: 34px;
    padding-left: getWidth(2);
    padding-bottom: getWidth(1.4);
    width: getWidth(6);
    height: getWidth(6);
    top: getWidth(-0.25);
    right: getWidth(-0.25);
    border-radius: getWidth(0.25);
  }
}
// 核酸检测阳性
.msg-error {
  border-image: linear-gradient(
      45deg,
      rgba(255, 124, 110, 1),
      rgba(245, 43, 123, 1)
    )
    1;
  &:after {
    background: linear-gradient(
      to top right,
      transparent 0%,
      transparent 50%,
      rgba(255, 124, 110, 1) 50%,
      rgba(245, 43, 123, 1) 100%
    );
    animation: hue 1s infinite ease-in-out;
  }
}
// 有异常， 未检测核酸
.msg-waring {
  border-image: linear-gradient(
      45deg,
      rgba(255, 168, 59, 1),
      rgba(255, 168, 59, 1)
    )
    1;
  &:after {
    background: linear-gradient(
      to top right,
      transparent 0%,
      transparent 50%,
      rgba(255, 168, 59, 1) 50%,
      rgba(255, 168, 59, 1) 100%
    );
    animation: hue 1s infinite ease-in-out;
  }
}
@keyframes hue {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

// 普通框样式
.nomal-item {
  display: flex;
  flex-direction: row;
  > .content-line {
    height: 100%;
  }
  .left {
    flex: 27;
    display: flex;
    flex-direction: column;
    justify-content: center;
    > .item .label {
      margin-top: getHeight(1.2);
    }
  }
  .block {
    flex: 1;
    height: 100%;
    width: 100%;
    .chartText{
      margin-bottom:getWidth(1)
    }
    // padding-left: 1.85rem;
  }
  .right {
    flex: 73;
    margin-left: getWidth(3.75);
    margin-top: getHeight(2);
    .rightTitle {
      font-family: PingFangSC-Medium;
      font-size: 1.5rem;
      margin-bottom: getHeight(2);
    }
    .more {
      font-family: PingFangSC-Medium;
      font-size: 1.31rem;
      color: rgba(31, 183, 255, 0.9);
      cursor: pointer;
      margin-left: getWidth(13);
    }
    .red {
      color: rgba(255, 61, 125, 0.8);
    }
    .yellow {
      color: rgba(255, 224, 9, 0.8);
    }
    .rightContent {
      font-family: PingFangSC-Medium;
      font-size: 1.31rem;
      color: rgba(255, 255, 255, 0.9);
    }
  }
}
</style>
<style lang="scss">
// ::v-deep {
//   .new-multipoint {
//     .el-dialog__header {
//       padding: 0;
//       .el-dialog__headerbtn {
//         z-index: 1;
//       }
//     }
//     .el-dialog__body {
//       width: 1920px;
//       height: 1080px;
//       padding: 0;
//     }
//   }
// }

$fontSize: 0.88rem;
$height: 1.38rem;
.new-multipoint > .el-dialog {
  // width: 15%;
  width: 1920px;
  height: 1080px;
  margin: 0 auto;
  margin-top: 30rem !important;
  background: #212342;
  padding: 0;
  // height: 50%;
  // background-color: blue;

  .modal-container {
    display: flex;
  }
  .left,
  .right {
    width: 50%;
  }
  .left {
    display: flex;
    flex-direction: column;
    > .item {
      display: flex;
      flex-direction: row;
      align-items: center;
      padding: 1rem 0;
      border-bottom: 1px solid rgba(39, 51, 88, 0.829);

      > .img {
        // width: getWidth(180);
        // height: getWidth(180);
        width: 5rem;
        height: 4.25rem;
        border-radius: 0.06rem;
        margin-right: 1rem;
        flex: none;
        > img {
          width: 100%;
          height: 100%;
          flex: none;
        }
      }

      .info {
        display: flex;
        flex-wrap: wrap;
        > .info-item {
          width: 33.33%;
          padding: 0 2%;
          margin-top: 0.2rem;
          display: flex;
          justify-content: space-between;
          color: #fff;
        }
      }
    }
  }
}
.new-multipoint-detail > .el-dialog {
  // width: 15%;
  width: 960px;
  height: 1080px;
  margin: 0 auto;
  margin-top: 30rem !important;
  background: #212342;
  padding: 0;
  // height: 50%;
  // background-color: blue;

  .modal-container {
    display: flex;
  }
  .left,
  .right {
    width: 50%;
  }
}
.new-multipoint .el-table__empty-block,
.new-multipoint-detail > .el-table__empty-block {
  background-color: #212342;
}
// 分页器 页面尺寸样式
.page-size-popper {
  border: 0.06rem solid #545675;

  .el-select-dropdown__list {
    background: #212342;
    color: #fff;
  }
  .el-select-dropdown__item {
    color: #fff;
  }
  .el-select-dropdown__item.selected {
    background: #151635;
    color: rgba(0, 232, 255, 1);
  }
  .el-select-dropdown__item.hover,
  .el-select-dropdown__item:hover {
    background: rgba(#151635, 0.4);
  }
}
.new-multipoint-detail-yuqing {
  width: 940px;
  height: 400px;
  .el-notification__content {
    padding: 20px;
    display: flex;
    justify-content: center;
    align-items: center;
    > p > img {
      width: 100%;
      height: 100%;
    }
  }
}
</style>
